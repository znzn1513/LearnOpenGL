Shaders
  GLSL
    벡터와 행렬 연산에 유용하도록 조정된 C스타일 언어. 셰이더에 사용됨.
	
	코드 작성순서
	  1. 버전 선언
	  2. 인풋 선언
	  3. 아웃풋 선언
	  4. 유니폼 선언
	  5. 메인 함수
	  
	  #version version_number
	  in type in_variable_name;
	  in type in_variable_name;

	  out type out_variable_name;
  
	  uniform type uniform_name;
  
	  void main()
	  {
		// process input(s) and do some weird graphics stuff
		...
		// output processed stuff to output variable
		out_variable_name = weird_stuff_we_processed;
	  }

  Types
	Vectors
	  vecn : default vector of n floats
	  bvecn : a vector of n booleans
	  ivecn : a vector of n integers
	  uvecn : a vector of n unsigned integers
	  dvecn : a vector of n double components
	  벡터의 각 컴포넌트들을 .xyzw, .rgba, .stpq 세가지 형태로 접근가능.
	  
	  Swizzling
		벡터의 컴포넌트들에 유연하게 접근하도록 해주는 기능.
		아래처럼 접근 가능.
		vec2 someVec;
		vec4 differentVec = someVec.xyxx;
		vec3 anotherVec = differentVec.zyw;
		vec4 otherVec = someVec.xxxx + anotherVec.yxzy;
		
		다음처럼 선언도 가능.
		vec2 vect = vec2(0.5, 0.7);
		vec4 result = vec4(vect, 0.0, 0.0);
		vec4 otherResult = vec4(result.xyz, 1.0);
	
  Ins and Outs
	버텍스 셰이더는 받을 인풋의 형태를 지정해야 함. 이전의 (location = 0) 처럼.
	프래그먼트 셰이더는 vec4 Color를 아웃풋으로 사용해야됨.
	
	버텍스 셰이더 아웃풋을 프래그먼트 셰이더 인풋으로 받는 코드.
	  VERTEX SHADER
	  #version 330 core
	  layout (location = 0) in vec3 aPos; // the position variable has attribute position 0
  
	  out vec4 vertexColor; // specify a color output to the fragment shader

	  void main()
	  {
		gl_Position = vec4(aPos, 1.0); // see how we directly give a vec3 to vec4's constructor
		vertexColor = vec4(0.5, 0.0, 0.0, 1.0); // set the output variable to a dark-red color
	  }
	  
	  FRAGMENT SHADER
	  #version 330 core
	  out vec4 FragColor;
  
	  in vec4 vertexColor; // the input variable from the vertex shader (same name and same type)  

	  void main()
	  {
		FragColor = vertexColor;
	  }
	
  Uniforms
	CPU에서 위와는 다른 방법으로 GPU로 전달하는 데이터.
	전역 데이터. 프로그램 객체 내부의 셰이더들 끼리는 모두 값을 공유.
	한번 값을 설정하면 리셋하거나 업데이트하기 전까지 동일한 값을 유지.
	
	Uniform 사용.
	  #version 330 core
	  out vec4 FragColor;
  
	  uniform vec4 ourColor; // we set this variable in the OpenGL code.

	  void main()
	  {
		FragColor = ourColor;
	  }
	위 코드의 uniform ourColor는 아무것도 설정되지 않았으므로 CPU에서 설정해줘야 함.
	
	Uniform 설정.
	  float timeValue = glfwGetTime();
	  float greenValue = (sin(timeValue) / 2.0f) + 0.5f;
	  int vertexColorLocation = glGetUniformLocation(shaderProgram, "ourColor");
	  glUseProgram(shaderProgram);
	  glUniform4f(vertexColorLocation, 0.0f, greenValue, 0.0f, 1.0f);
	
	위 내용을 반영한 실행 코드.
	while(!glfwWindowShouldClose(window))
	{
		// input
		processInput(window);

		// render
		// clear the colorbuffer
		glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT);

		// be sure to activate the shader
		glUseProgram(shaderProgram);
  
		// update the uniform color
		float timeValue = glfwGetTime();
		float greenValue = sin(timeValue) / 2.0f + 0.5f;
		int vertexColorLocation = glGetUniformLocation(shaderProgram, "ourColor");
		glUniform4f(vertexColorLocation, 0.0f, greenValue, 0.0f, 1.0f);

		// now render the triangle
		glBindVertexArray(VAO);
		glDrawArrays(GL_TRIANGLES, 0, 3);
  
		// swap buffers and poll IO events
		glfwSwapBuffers(window);
		glfwPollEvents();
	}
	
  More Attributes!
	버텍스에 색깔과 컬러 설정.
	  float vertices[] = {
		// positions         // colors
		 0.5f, -0.5f, 0.0f,  1.0f, 0.0f, 0.0f,   // bottom right
		-0.5f, -0.5f, 0.0f,  0.0f, 1.0f, 0.0f,   // bottom left
		 0.0f,  0.5f, 0.0f,  0.0f, 0.0f, 1.0f    // top 
	  };
	
	Vertex shader에서 사용.
	  #version 330 core
	  layout (location = 0) in vec3 aPos;   // the position variable has attribute position 0
	  layout (location = 1) in vec3 aColor; // the color variable has attribute position 1
  
	  out vec3 ourColor; // output a color to the fragment shader

	  void main()
	  {
		gl_Position = vec4(aPos, 1.0);
		ourColor = aColor; // set ourColor to the input color we got from the vertex data
	  }
	
	Fragment Shader.
	  #version 330 core
	  out vec4 FragColor;  
	  in vec3 ourColor;
  
	  void main()
	  {
		FragColor = vec4(ourColor, 1.0);
	  }
	
	VBO 설정.
	  // position attribute
	  glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0);
	  glEnableVertexAttribArray(0);
	  // color attribute
	  glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)(3* sizeof(float)));
	  glEnableVertexAttribArray(1);

  Our own shader class
	셰이더들을 쓰고 컴파일하고 관리하는 것이 번거롭기 때문에 디스크에서 읽어들여서 컴파일하고 에러까지 확인해서 사용이 쉽도록 셰이더 클래스를 작성.
	
	#ifndef SHADER_H
	#define SHADER_H

	#include <glad/glad.h> // include glad to get all the required OpenGL headers
  
	#include <string>
	#include <fstream>
	#include <sstream>
	#include <iostream>
  
	class Shader
	{
	public:
		// the program ID
		unsigned int ID;
  
		// constructor reads and builds the shader
		Shader(const char* vertexPath, const char* fragmentPath);
		// use/activate the shader
		void use();
		// utility uniform functions
		void setBool(const std::string &name, bool value) const;  
		void setInt(const std::string &name, int value) const;   
		void setFloat(const std::string &name, float value) const;
	};
	#endif
	
Shader(const char* vertexPath, const char* fragmentPath)
{
    // 1. retrieve the vertex/fragment source code from filePath
    std::string vertexCode;
    std::string fragmentCode;
    std::ifstream vShaderFile;
    std::ifstream fShaderFile;
    // ensure ifstream objects can throw exceptions:
    vShaderFile.exceptions (std::ifstream::failbit | std::ifstream::badbit);
    fShaderFile.exceptions (std::ifstream::failbit | std::ifstream::badbit);
    try 
    {
        // open files
        vShaderFile.open(vertexPath);
        fShaderFile.open(fragmentPath);
        std::stringstream vShaderStream, fShaderStream;
        // read file's buffer contents into streams
        vShaderStream << vShaderFile.rdbuf();
        fShaderStream << fShaderFile.rdbuf();		
        // close file handlers
        vShaderFile.close();
        fShaderFile.close();
        // convert stream into string
        vertexCode   = vShaderStream.str();
        fragmentCode = fShaderStream.str();		
    }
    catch(std::ifstream::failure e)
    {
        std::cout << "ERROR::SHADER::FILE_NOT_SUCCESFULLY_READ" << std::endl;
    }
    const char* vShaderCode = vertexCode.c_str();
    const char* fShaderCode = fragmentCode.c_str();

	// 2. compile shaders
	unsigned int vertex, fragment;
	int success;
	char infoLog[512];
	
	// vertex Shader
	vertex = glCreateShader(GL_VERTEX_SHADER);
	glShaderSource(vertex, 1, &vShaderCode, NULL);
	glCompileShader(vertex);
	// print compile errors if any
	glGetShaderiv(vertex, GL_COMPILE_STATUS, &success);
	if(!success)
	{
		glGetShaderInfoLog(vertex, 512, NULL, infoLog);
		std::cout << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;
	};
	
	// similiar for Fragment Shader
	[...]
	
	// shader Program
	ID = glCreateProgram();
	glAttachShader(ID, vertex);
	glAttachShader(ID, fragment);
	glLinkProgram(ID);
	// print linking errors if any
	glGetProgramiv(ID, GL_LINK_STATUS, &success);
	if(!success)
	{
		glGetProgramInfoLog(ID, 512, NULL, infoLog);
		std::cout << "ERROR::SHADER::PROGRAM::LINKING_FAILED\n" << infoLog << std::endl;
	}
	
	// delete the shaders as they're linked into our program now and no longer necessary
	glDeleteShader(vertex);
	glDeleteShader(fragment);
}

실제 사용.
Shader ourShader("path/to/shaders/shader.vs", "path/to/shaders/shader.fs");
[...]
while(...)
{
    ourShader.use();
    ourShader.setFloat("someUniform", 1.0f);
    DrawStuff();
}