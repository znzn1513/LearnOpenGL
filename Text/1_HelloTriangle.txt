헬로 트라이앵글
 그래픽 파이프라인 : 3D좌표를 스크린 2D컬러 픽셀로 변환하는 과정.
 버텍스 데이터 입력 -> Vertex Shader -> Shape Assembly -> Geometry Shader -> Rasterization -> Fragment Shader -> Tests and Blending
 각 셰이더들을 프로그래머가 수정 가능.
 
 Vertex Input
 OpenGL only processes 3D coordinates when they're in a specific range between -1.0 and 1.0 on all 3 axes (x, y and z)

	float vertices[] = {
		-0.5f, -0.5f, 0.0f,
		0.5f, -0.5f, 0.0f,
		0.0f,  0.5f, 0.0f
	};

 VBO(Vertex Buffer Object) : GPU메모리에서 버텍스를 담고 있는 객체. 한번에 많은 데이터를 그래픽카드로 보내서 보관 가능.
	정점 버퍼 객체 생성. VBO에는 객체 ID가 들어감.
	  unsigned int VBO;
	  glGenBuffers(1, &VBO);  
	OpenGL에는 많은 유형의 버퍼 객체가 있지만, VBO는 GL_ARRAY_BUFFER.
	  glBindBuffer(GL_ARRAY_BUFFER, VBO);  
	GL_ARRAY_BUFFER에 데이터 할당
	  glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

  Vertex Shader
	OpenGL에서 버텍스 셰이더의 가장 간단한 형태. 입력받은 좌표를 그대로 출력. gl_Position은 위치를 가리키는 4차원 버퍼이므로 w에 1.0 설정.
	보통의 버텍스 셰이더 입력은 NDC에 있지 않으므로 좀더 복잡함.
	  #version 330 core
	  layout (location = 0) in vec3 aPos;

	  void main()
	  {
		gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);
	  }

  셰이더 컴파일
	위 코드를 문자열에 저장.
	  const char *vertexShaderSource = "#version 330 core\n"
      "layout (location = 0) in vec3 aPos;\n"
      "void main()\n"
      "{\n"
      "   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n"
      "}\0";
	위 코드를 사용하려면 셰이더를 동적으로 컴파일해야 함. 
	먼저 Vertex Shader 객체를 생성해야함.
	  unsigned int vertexShader;
	  vertexShader = glCreateShader(GL_VERTEX_SHADER);
	셰이더 소스코드를 셰이더 객체에 연결하고 컴파일.
	  glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
	  glCompileShader(vertexShader);
  
  Fragment Shader
	소스코드 
	  #version 330 core
	  out vec4 FragColor;

	  void main()
	  {
		FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);
	  }
	
	컴파일
	  셰이더 종류가 fragment shader로 바뀐거 말고는 버텍스 셰이더와 동일.
	  unsigned int fragmentShader;
	  fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
	  glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
	  glCompileShader(fragmentShader);
	
  셰이더 프로그램
	여러개의 셰이더들을 링크해둔 셰이더들의 결합체.
	셰이더 프로그램 생성.
	  unsigned int shaderProgram;
	  shaderProgram = glCreateProgram();
	셰이더 연결.
	  glAttachShader(shaderProgram, vertexShader);
	  glAttachShader(shaderProgram, fragmentShader);
	  glLinkProgram(shaderProgram);
	셰이더 프로그램 활성화.
	  glUseProgram(shaderProgram);
	셰이더 프로그램에 연결후 셰이더 객체 삭제.
	  glDeleteShader(vertexShader);
	  glDeleteShader(fragmentShader);

  버텍스 속성 연결하기.
    버텍스 셰이더는 우리가 입력하는 데이터의 구조를 모르기때문에 해당 부분에 설정이 필요함.
	  glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
	  glEnableVertexAttribArray(0);
	
	OpenGL에서는 매프레임 다음과정을 진행해야 함.
	  // 0. copy our vertices array in a buffer for OpenGL to use
	  glBindBuffer(GL_ARRAY_BUFFER, VBO);
	  glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
	  // 1. then set the vertex attributes pointers
	  glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
	  glEnableVertexAttribArray(0);  
	  // 2. use our shader program when we want to render an object
	  glUseProgram(shaderProgram);
	  // 3. now draw the object 
	  someOpenGLFunctionThatDrawsOurTriangle();
	  하지만 너무 복잡하고 부하가 큼. 그래서
  Vertex Array Object(VAO)
	버텍스 속성이 설정된 VBO의 배열. 모든 상태가 VAO에 저장됨.
	만들때 한번만 설정해주면 다시 그릴때는 그 VAO를 다시 바인딩 해주면 됨.
	
	VAO 생성.
	  unsigned int VAO;
	  glGenVertexArrays(1, &VAO);
	
	VAO를 사용했을때 렌더링 과정.
	  // ..:: Initialization code (done once (unless your object frequently changes)) :: ..
	  // 1. bind Vertex Array Object
	  glBindVertexArray(VAO);
	  // 2. copy our vertices array in a buffer for OpenGL to use
	  glBindBuffer(GL_ARRAY_BUFFER, VBO);
	  glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
	  // 3. then set our vertex attributes pointers
	  glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
	  glEnableVertexAttribArray(0);  

	  [...]

	  // ..:: Drawing code (in render loop) :: ..
	  // 4. draw the object
	  glUseProgram(shaderProgram);
	  glBindVertexArray(VAO);
	  someOpenGLFunctionThatDrawsOurTriangle();
	
  삼각형 그리기
	glDrawArrays 함수는 현재 활성화된 셰이더로 삼각형들을 그림.
	  glUseProgram(shaderProgram);
	  glBindVertexArray(VAO);
	  glDrawArrays(GL_TRIANGLES, 0, 3);

  Element Buffer Objects(EBO)
	사각형을 위와 같은 방식으로 그리면 동일한 버텍스를 여러번 입력해야함. 그리려는 대상이 크고 복잡해질수록 버텍스 정보의 중복이 심해짐.
	
	Indexed drawing
	  위의 문제를 해결하기 위한 드로잉 방법.
	  유니크한 버텍스 정보와 버텍스를 어떤 순서로 그릴지 버텍스의 인덱스를 나타내는 배열을 같이 전달.
	  float vertices[] = {
		0.5f,  0.5f, 0.0f,  // top right
		0.5f, -0.5f, 0.0f,  // bottom right
		-0.5f, -0.5f, 0.0f,  // bottom left
		-0.5f,  0.5f, 0.0f   // top left 
	  };
	  unsigned int indices[] = {  // note that we start from 0!
		0, 1, 3,   // first triangle
		1, 2, 3    // second triangle
	  };
	
	EBO 생성
	  unsigned int EBO;
	  glGenBuffers(1, &EBO);
	
	EBO 바인드
	  VBO와 마찬가지로 gpu 버퍼에 바인드가 필요함.
	  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
	  glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);
	
	EBO 드로우
	  기존 glDrawArrays를 대신해서 glDrawElements를 사용.
	  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
	  glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
	
	EBO도 VBO처럼 반복해서 바인딩을 해야함.
	그렇지만 그전에 먼저 VAO를 바인딩 해두면 EBO의 glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO); 를 호출하면 자동으로 VAO에 바인딩 됨.
	
	최종 EBO 드로우
	  // ..:: Initialization code :: ..
	  // 1. bind Vertex Array Object
	  glBindVertexArray(VAO);
	  // 2. copy our vertices array in a vertex buffer for OpenGL to use
	  glBindBuffer(GL_ARRAY_BUFFER, VBO);
	  glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
	  // 3. copy our index array in a element buffer for OpenGL to use
	  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
	  glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);
	  // 4. then set the vertex attributes pointers
	  glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
	  glEnableVertexAttribArray(0);  

	[...]
  
	  // ..:: Drawing code (in render loop) :: ..
	  glUseProgram(shaderProgram);
	  glBindVertexArray(VAO);
	  glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
	  glBindVertexArray(0);