텍스처
  OpenGl에서 UV는 좌하단이 (0,0) 우상단이 (1,1).
  
  텍스처 래핑
    GL_REAT : Default. 텍스처 이미지를 반복.
	GL_MIRRORED_REPEAT : 반복할때마다 이미지를 미러링.
	GL_CLAMP_TO_EDGE : 0이하는 0으로 1이상은 1로 고정. 가장자리가 늘어난 것처럼 표현됨.
	GL_CLAMP_TO_BORDER : 범위 밖은 사용자 지정 색상으로 채움.
	
	각 텍스처 좌표축 별로 설정 가능
	2D : (s,t), 3D : (x, y, z).
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_MIRRORED_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_MIRRORED_REPEAT);
	
	GL_CLAMP_TO_BORDER를 선택하면 색상도 지정해야 함.
	float borderColor[] = { 1.0f, 1.0f, 0.0f, 1.0f };
	glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_BORDER_COLOR, borderColor);  

  텍스처 필터링
	GL_NEAREST : 지정된 텍스처 좌표에 가장 가까운 텍셀을 선택. 결과물이 딱딱하게 보일수 있음.
	GL_LINEAR((bi)linear filtering) : 주변의 텍스처 색깔을 선형보간. 결과물이 좀더 스무스하게 보임.
	
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	
  밉맵
	고해상도 텍스처로 가까운 곳과 먼곳을 모두 그리는 것은 부하가 심함. 밉맵은 가까운 곳은 고해상도로 먼곳은 저해상도로 그릴수 있도록 도와줌.
	glGenerateMipmap 함수로 밉맵을 자동 생성 가능.
	밉맵을 사용할때도 별도의 필터링 방법이 있음.
	
	GL_NEAREST_MIPMAP_NEAREST : 해당 픽셀의 가장 가까운 밉맵을 골라서, 가장 가까운 텍셀을 선택해서 그림.
	GL_LINEAR_MIPMAP_NEAREST : 해당 픽셀의 가장 가까운 밉맵을 고르고, 텍스처에서 선형보간을 사용.
	GL_NEAREST_MIPMAP_LINEAR : ??? 두 밉맵을 선형보간으로 선택?(실제 코드가 어떻게 동작하는지 혹은 밉맵이 어떻게 동작하는지 확인 필요), 선택된 밉맵에서 Nearest 텍셀 선택.
	GL_LINEAR_MIPMAP_LINEAR : 두 밉맵을 선형보간 하고, 보간된 레벨을 샘플링?
	
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	
  텍스처 생성과 로드
	stb_image 라이브러리를 사용해서 텍스처를 로딩.
	헤더를 추가한뒤 stbi_load 함수를 이용해서 텍스처 로드
	
	int width, height, nrChannels;
	unsigned char *data = stbi_load("container.jpg", &width, &height, &nrChannels, 0);
	
	텍스처 생성
	  텍스처 객체 생성, 정수형 ID로 참조.
	  unsigned int texture;
	  glGenTextures(1, &texture); 
	
	  바인드 텍스처
	  glBindTexture(GL_TEXTURE_2D, texture);  

	  텍스처 객체에 이미지 데이터를 입력
	  glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);
	  glGenerateMipmap(GL_TEXTURE_2D);
	  
	  glTexImage2D 설명
		1번 인수는 텍스처 대상 설정. GL_TEXTUR_2D에 바인딩된 텍스처 객체에 이미지 생성한다는 의미(GL_TEXTURE_1D, GL_TEXTURE_3D에 바인딩된 객체에는 영향X)
		2번 인수는 밉맵수준을 지정.
		3번 인수는 텍스처 형식.
		4~5번 인수는 텍스처의 너비 높이 설정.
		6번 인수는 항상 0(레거시 항목)
		7~8번 인수는 소스 이미지 형식과 데이터 유형.
		9번 인수는 실제 이미지 데이터.
	  
	  텍스처 객체에 이미지데이터가 복사 되기 때문에 기존 데이터 삭제.
	    stbi_image_free(data);

	텍스처 적용
	  float vertices[] = {
		// positions          // colors           // texture coords
		 0.5f,  0.5f, 0.0f,   1.0f, 0.0f, 0.0f,   1.0f, 1.0f,   // top right
		 0.5f, -0.5f, 0.0f,   0.0f, 1.0f, 0.0f,   1.0f, 0.0f,   // bottom right
		-0.5f, -0.5f, 0.0f,   0.0f, 0.0f, 1.0f,   0.0f, 0.0f,   // bottom left
		-0.5f,  0.5f, 0.0f,   1.0f, 1.0f, 0.0f,   0.0f, 1.0f    // top left 
	  };
	  
	  새로 Tex Coord Attribute를 추가.
	  glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
	  glEnableVertexAttribArray(2);
	  
	  그에 맞게 버텍스 셰이더 코드도 수정	
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aColor;
layout (location = 2) in vec2 aTexCoord;

out vec3 ourColor;
out vec2 TexCoord;

void main()
{
    gl_Position = vec4(aPos, 1.0);
    ourColor = aColor;
    TexCoord = aTexCoord;
}

	  버텍스 셰이더에서 출력된 TexCoord를 이용해서 프래그먼트 셰이더에서 텍스처 샘플링.
#version 330 core
out vec4 FragColor;
  
in vec3 ourColor;
in vec2 TexCoord;

uniform sampler2D ourTexture;

void main()
{
    FragColor = texture(ourTexture, TexCoord);
}

	  드로잉
	  glBindTexture(GL_TEXTURE_2D, texture);
	  glBindVertexArray(VAO);
	  glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
	  
	텍스처 유닛
	  프래그먼트 셰이더에서 sampler2D를 쓸때, 그냥 glBindTexture 텍스처를 했을뿐 유니폼 처럼 따로 이름을 지정해주지 않았음.
	  텍스처들은 지정된 위치가 있고, 다른 설정없이 텍스처를 바인딩 하면 0번자리에 기본적으로 들어가게 됨.
	  이런 텍스처의 위치를 텍스처 유닛이라고 부름. 텍스처 유닛의 목표는 프래그먼트 셰이더에서 여러개의 텍스처를 사용하기 위함.
	  
	  기본적으로 텍스처 유닛 0번만 활성화 되어있고.
	  glActiveTexture 함수를 이용해서 추가로 다른 유닛도 활성화 가능.
	  
	  glActiveTexture(GL_TEXTURE0); // activate the texture unit first before binding texture
	  glBindTexture(GL_TEXTURE_2D, texture);

	  프래그먼트 셰이더에서 여러개의 텍스처를 사용하는 예.
uniform sampler2D texture1;
uniform sampler2D texture2;

void main()
{
    FragColor = mix(texture(texture1, TexCoord), texture(texture2, TexCoord), 0.2);
}

